$valor_gap: 2, 4, 8, 10, 16, 22, 24, 32, 46, 58, 64, 72, 92, 124;
$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

@mixin media($breakpoint) {
  $breakpoint-value: map-get($grid-breakpoints, $breakpoint);

  @if not $breakpoint-value {
    @error "Invalid breakpoint: #{$breakpoint}.";
  }

  @media (min-width: $breakpoint-value) {
    @content;
  }
}

@mixin container {
  width: 100%;
  margin: 0 auto;
  padding: 0 25px;

  @include media("sm") {
    max-width: calc(map-get($grid-breakpoints, sm) - 10px);
  }

  @include media("md") {
    max-width: calc(map-get($grid-breakpoints, md) - 10px);
  }

  @include media("lg") {
    max-width: calc(map-get($grid-breakpoints, lg) - 10px);
  }

  @include media("xl") {
    max-width: calc(map-get($grid-breakpoints, xl) - 10px);
  }

  @include media("xxl") {
    max-width: calc(map-get($grid-breakpoints, xxl) - 10px);
  }
}

.container {
  @include container;
}

.grid {
  display: grid;
}

@for $i from 1 through 12 {
  $columns: 1 * $i;

  .grid-#{$i} {
    grid-template-columns: repeat(#{$i}, 1fr);
  }

  @each $breakpoint, $value in $grid-breakpoints {
    @include media($breakpoint) {
      .grid-#{$i}-#{$breakpoint} {
        grid-template-columns: repeat(#{$i}, 1fr);
      }
    }
  }
}

@each $size in $valor_gap {
  .gap-#{$size} {
    gap: #{$size}px;
  }

  @each $breakpoint, $value in $grid-breakpoints {
    @include media($breakpoint) {
      .gap-#{$size}-#{$breakpoint} {
        gap: #{$size}px;
      }
    }
  }
}

@mixin paragraph() {
  font-family: variable.$font-family;
  font-size: 1.6rem;
  line-height: 1.21;
  color: variable.$secondary-color-gray;

  @include media(lg) {
    font-size: 1.8rem;
  }
}

@mixin FontSize($size, $family) {
  font-family: $family;

  @if $size ==14 {
    font-size: 14px;
  }

  @if $size ==16 {
    font-size: 16px;
  } @else if $size ==22 {
    font-size: 22px;
    line-height: 39.6px;
  } @else if $size ==26 {
    font-size: 26px;
  } @else if $size ==38 {
    font-size: 38px;
  } @else if $size ==48 {
    font-size: 48px;
  } @else if $size ==58 {
    font-size: 58px;
  } @else if $size ==64 {
    font-size: 64px;
  } @else {
    font-size: 14px;
  }
}

@mixin Inputsearch() {
  padding: 0 25px;
  display: flex;
  justify-content: center;
  height: 40px;
  width: 100%;

  @include media(lg) {
    padding: 0 25px;
  }
  input {
    width: 100%;
    background-color: $color-white;
    border: none;
    padding: 0 15px;
    border-top-left-radius: 6px;
    border-bottom-left-radius: 6px;
    font-family: $font-family;
    font-size: 1.6rem;
  }

  input::placeholder {
    font-size: 1.6rem;
    color: $color-medium-gray;
    font-family: $font-family;
  }

  button {
    background-color: $color-white;
    border-top-right-radius: 6px;
    border-bottom-right-radius: 6px;
    border: none;

    i {
      font-size: 1.6rem;
      margin-right: 15px;
      color: $color-bright-red;
    }
  }
}

@mixin VersaoMobile() {
  display: block;

  @include media(lg) {
    display: none;
  }
}

@mixin VersaoDesktop() {
  display: none;

  @include media(lg) {
    display: block;
  }
}

.bannerMobile {
  @include VersaoMobile();
}

.bannerDesktop {
  @include VersaoDesktop();
}

.bg-gray {
  background-color: $color-lightest-gray-alt;
}

* {
  font-family: $font-family;
}

@mixin hoveBtn {
  background-color: $color-red-dark;
}

@mixin table() {
  font-family: $font-family;
  width: 100%;
  border: none;
  border-spacing: 0;

  thead {
    tr {
      background-color: $color-light-red;

      th {
        color: $color-darker-gray;
        padding: 15px;
        font-size: 1.2rem;
      }
    }
  }

  tbody {
    tr:nth-child(odd) {
      background-color: $color-off-white;
    }
    td {
      color: $color-dark-gray;
      font-size: 1.2rem;
      line-height: 1.61;
      padding: 5px;
    }
  }
}
